scalar Date @scalar(class: "DeInternetJongens\\LighthouseUtils\\Schema\\Scalars\\Date")
scalar DateTimeTz @scalar(class: "DeInternetJongens\\LighthouseUtils\\Schema\\Scalars\\DateTimeTz")
scalar Assoc @scalar(class: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Scalars\\Assoc")
scalar Mixed @scalar(class: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Scalars\\Mixed")

schema {
    query: Query
}

type Query {
    me: User @auth
    version: String

    users: [User!] @roles(roles: ["admin"]) @queryablePaginate(model: "Anomaly\\UsersModule\\User\\UserModel")
    user(id: ID! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")
    userByUsername(username: String! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")
    userByEmail(email: String! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")

    roles: [UserRole!] @queryablePaginate(model: "Anomaly\\UsersModule\\Role\\RoleModel")
    role(id: ID! @eq): UserRole @find(model: "Anomaly\\UsersModule\\Role\\RoleModel")
    roleBySlug(slug: String! @eq): UserRole @find(model: "Anomaly\\UsersModule\\Role\\RoleModel")

    pages: [Page!] @queryablePaginate(model: "Anomaly\\PagesModule\\Page\\PageModel")
    page(id: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")
    pageBySlug(slug: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")
    pageByPath(path: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")

    menus: [NavigationMenu!] @queryablePaginate(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")
    menu(id: ID! @eq): NavigationMenu @find(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")
    menuBySlug(slug: ID! @eq): NavigationMenu @find(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")
    menuTree(identifier: ID!): MenuTree  @field(resolver: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Fields\\MenuTreeField@resolve")

    blocks: [Block!] @queryablePaginate(model: "Anomaly\\BlocksModule\\Block\\BlockModel")
    configuration: [Configuration!] @all(model: "Anomaly\\ConfigurationModule\\Configuration\\ConfigurationModel")

    posts: [Post!] @queryablePaginate(model: "Anomaly\\PostsModule\\Post\\PostModel")
    post(id: ID! @eq): Post @find(model: "Anomaly\\PostsModule\\Post\\PostModel")

}

type Stream @model(class: "Anomaly\\Streams\\Platform\\Stream\\StreamModel"){
    id: ID! @globalId
}