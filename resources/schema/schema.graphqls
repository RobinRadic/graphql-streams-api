
# stream: users.users
type User {
	id: ID
	roles: [UserRole!] @hasMany
	created_at: Date @roles(role: "admin")
	updated_at: Date @roles(role: "admin")
	deleted_at: Date @roles(role: "admin")
	email: String @roles(role: "admin")
	permissions: [String!]
	username: String
	display_name: String
	first_name: String
	last_name: String
	activated: Boolean
	enabled: Boolean
}

# stream: users.roles
type UserRole {
	id: ID
	name: String
	slug: String
	description: String
	permissions: [String!]
}

# stream: pages.pages
type Page {
	id: ID
	title: String
	slug: String
	path: String
	content: String @field(resolver: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Fields\\PageContentField@resolve")
	type: PageType @belongsTo
	parent: Page @belongsTo
	children: [Page!] @hasMany
	siblings: [Page!] @hasMany
	visible: Boolean
	enabled: Boolean
	exact: Boolean
	home: Boolean
	meta_title: String
	meta_description: String
	themeLayout: String
	allowedRoles: [UserRole!] @hasMany
}

# stream: pages.types
type PageType {
	id: ID
	name: String
	slug: String
	description: String
}

# stream: navigation.menus
type NavigationMenu {
	id: ID
	name: String
	slug: String
	description: String
	links: [NavigationLink!] @hasMany
}

# stream: navigation.links
type NavigationLink {
	menu: NavigationMenu @belongsTo
	children: [NavigationLink!] @hasMany
	target: String
	class: String
	parent: NavigationLink @belongsTo
	allowedRoles: [UserRole!] @hasMany
}

# stream: configuration.configuration
type Configuration {
	scope: String
	key: String
	value: String
}

# stream: blocks.blocks
type Block {
	title: String
	area: BlockArea @belongsTo
	extension: Assoc
	displayTitle: Boolean
}

# stream: blocks.areas
type BlockArea {
	name: String
	slug: String
	description: String
}

# stream: posts.posts
type Post {
	id: ID
	title: String
	summary: String
	slug: String
	type: PostType @belongsTo
	publish_at: DateTimeTz
	author: User @belongsTo
	category: PostCategory @belongsTo
	featured: Boolean
	enabled: Boolean
	tags: [String!]
}

# stream: posts.types
type PostType {
	name: String
	slug: String
	description: String
}

# stream: posts.categories
type PostCategory {
	name: String
	slug: String
	description: String
}

scalar Date @scalar(class: "DeInternetJongens\\LighthouseUtils\\Schema\\Scalars\\Date")
scalar DateTimeTz @scalar(class: "DeInternetJongens\\LighthouseUtils\\Schema\\Scalars\\DateTimeTz")
scalar Assoc @scalar(class: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Scalars\\Assoc")
scalar Mixed @scalar(class: "Radic\\GraphqlStreamsApiModule\\GraphQL\\Scalars\\Mixed")

schema {
    query: Query
}

type Query {
    me: User @auth
    version: String

    users: [User!] @roles(roles: ["admin"]) @queryablePaginate(model: "Anomaly\\UsersModule\\User\\UserModel")
    user(id: ID! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")
    userByUsername(username: String! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")
    userByEmail(email: String! @eq): User @roles(roles: ["admin"]) @find(model: "Anomaly\\UsersModule\\User\\UserModel")

    roles: [UserRole!] @queryablePaginate(model: "Anomaly\\UsersModule\\Role\\RoleModel")
    role(id: ID! @eq): UserRole @find(model: "Anomaly\\UsersModule\\Role\\RoleModel")
    roleBySlug(slug: String! @eq): UserRole @find(model: "Anomaly\\UsersModule\\Role\\RoleModel")

    pages: [Page!] @queryablePaginate(model: "Anomaly\\PagesModule\\Page\\PageModel")
    page(id: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")
    pageBySlug(slug: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")
    pageByPath(path: ID! @eq): Page @find(model: "Anomaly\\PagesModule\\Page\\PageModel")

    menus: [NavigationMenu!] @queryablePaginate(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")
    menu(id: ID! @eq): NavigationMenu @find(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")
    menuBySlug(slug: ID! @eq): NavigationMenu @find(model: "Anomaly\\NavigationModule\\Menu\\MenuModel")

    blocks: [Block!] @queryablePaginate(model: "Anomaly\\BlocksModule\\Block\\BlockModel")
    configuration: [Configuration!] @all(model: "Anomaly\\ConfigurationModule\\Configuration\\ConfigurationModel")

    posts: [Post!] @queryablePaginate(model: "Anomaly\\PostsModule\\Post\\PostModel")
    post(id: ID! @eq): Post @find(model: "Anomaly\\PostsModule\\Post\\PostModel")

}

type Stream @model(class: "Anomaly\\Streams\\Platform\\Stream\\StreamModel"){
    id: ID! @globalId
}

input QueryConstraints {
    where: [WhereConstraint!]
    orderBy: [OrderByConstraint!]
}

# We need this as the value for a WhereConstraint can basically be anything
#scalar Mixed @scalar

input WhereConstraint {
    column: String!
    operator: Operator = EQUALS
    value: Mixed!
    boolean: LogicalOperator = AND
}

enum Operator {
    IN @enum(value: "IN")
    NOT_IN @enum(value: "NOT IN")
    LIKE @enum(value: "LIKE")
    NOT_LIKE @enum(value: "NOT LIKE")
    EQUALS @enum(value: "=")
    NOT_EQUALS @enum(value: "!=")
    GREATER_THAN @enum(value: ">")
    GREATER_THAN_OR_EQUAL @enum(value: ">=")
    LESS_THAN @enum(value: "<")
    LESS_THAN_OR_EQUAL @enum(value: "<=")
}
input OrderByConstraint {
    column: String!
    order: Order!
}

enum Order {
    ASC @enum(value: "ASC")
    DESC @enum(value: "DESC")
}

enum LogicalOperator {
    AND @enum(value: "AND")
    OR @enum(value: "OR")
}
